From 61fb57832bbf13e88b5d4668ebe5a1dd07b46116 Mon Sep 17 00:00:00 2001
From: Michael Fruth <Michael.Fruth@uni-passau.de>
Date: Thu, 30 May 2024 15:08:53 +0200
Subject: [PATCH] Added WfPatch functionality

---
 include/wf-userland.h     |  1 +
 sql/CMakeLists.txt        |  2 ++
 sql/mysqld.cc             | 52 ++++++++++++++++++++++++++++-
 sql/sql_connect.cc        |  6 ++++
 sql/sql_parse.cc          |  6 ++++
 sql/threadpool.h          |  1 +
 sql/threadpool_generic.cc | 69 +++++++++++++++++++++++++++++++++++++--
 sql/wf-userland.c         |  1 +
 8 files changed, 134 insertions(+), 4 deletions(-)
 create mode 120000 include/wf-userland.h
 create mode 120000 sql/wf-userland.c

diff --git a/include/wf-userland.h b/include/wf-userland.h
new file mode 120000
index 00000000000..4caa8bbebf3
--- /dev/null
+++ b/include/wf-userland.h
@@ -0,0 +1 @@
+../wfpatch-userland/wf-userland.h
\ No newline at end of file
diff --git a/sql/CMakeLists.txt b/sql/CMakeLists.txt
index 83a1ea0abe7..675acf513ca 100644
--- a/sql/CMakeLists.txt
+++ b/sql/CMakeLists.txt
@@ -154,6 +154,8 @@ SET (SQL_SOURCE
                ${CMAKE_CURRENT_BINARY_DIR}/lex_token.h
                ${GEN_SOURCES}
                ${MYSYS_LIBWRAP_SOURCE}
+               # Wait-Free Code-Patching userland
+               wf-userland.c
 )
   
 IF ((CMAKE_SYSTEM_NAME MATCHES "Linux" OR
diff --git a/sql/mysqld.cc b/sql/mysqld.cc
index b3fb330f13c..18a79a0aec6 100644
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -264,6 +264,8 @@ inline void setup_fpu()
 #endif
 }
 
+#include "wf-userland.h"
+
 } /* cplusplus */
 
 #define MYSQL_KILL_SIGNAL SIGTERM
@@ -2661,6 +2663,14 @@ CONNECT *cache_thread(THD *thd)
     cached_thread_count++;
     for (;;)
     {
+      if (wf_is_quiescence()) {
+        cached_thread_count--;
+        mysql_mutex_unlock(&LOCK_thread_cache);
+        mysql_cond_signal(&COND_flush_thread_cache);
+        wf_global_quiescence();
+        mysql_mutex_lock(&LOCK_thread_cache);
+        cached_thread_count++;
+      }
       int error= mysql_cond_timedwait(&COND_thread_cache, &LOCK_thread_cache,
                                        &abstime);
       flushed= kill_cached_threads;
@@ -5309,6 +5319,32 @@ static void test_lc_time_sz()
 #endif//DBUG_OFF
 
 
+static void wf_wake_cached_threads() {
+    // See function flush_thread_cache()
+    mysql_mutex_lock(&LOCK_thread_cache);
+    while(cached_thread_count) {
+        mysql_cond_broadcast(&COND_thread_cache);
+        mysql_cond_wait(&COND_flush_thread_cache, &LOCK_thread_cache);
+    }
+    mysql_mutex_unlock(&LOCK_thread_cache);
+}
+
+static int wf_trigger_global_quiescence(int iteration)
+{
+  if (thread_handling <= SCHEDULER_ONE_THREAD_PER_CONNECTION || thread_handling == SCHEDULER_NO_THREADS) {
+      // one-thread-per-connection or no threads
+      pthread_kill(select_thread, SIGUSR1);
+      wf_wake_cached_threads();
+      return 0; // Do not call this function again
+  } else {
+      // threadpool
+      wf_threadpool_trigger();
+      if (iteration == 0)
+        pthread_kill(select_thread, SIGUSR1);
+      return 1; // Call this funciton again
+  }
+}
+
 #ifdef __WIN__
 int win_main(int argc, char **argv)
 #else
@@ -5701,6 +5737,18 @@ int mysqld_main(int argc, char **argv)
   }
 #endif
 
+	struct wf_configuration config = {
+        .amount_priorities = 4,
+        .trigger_sleep_ms = -1,
+		.trigger_global_quiescence = wf_trigger_global_quiescence,
+		.trigger_local_quiescence  = wf_trigger_global_quiescence,
+		.patch_applied = NULL,
+		.patch_done   = NULL,
+	};
+
+	wf_init(config);
+    wf_thread_birth_group("main", "main");
+
 #if defined(_WIN32) && !defined(EMBEDDED_LIBRARY)
   Service.SetRunning();
 #endif
@@ -6256,7 +6304,6 @@ void handle_connections_sockets()
     readFDs=clientFDs;
     retval= select((int) 0,&readFDs,0,0,0);
 #endif
-
     if (retval < 0)
     {
       if (socket_errno != SOCKET_EINTR)
@@ -6270,6 +6317,9 @@ void handle_connections_sockets()
 	if (!select_errors++ && !abort_loop)	/* purecov: inspected */
 	  sql_print_error("mysqld: Got error %d from select",socket_errno); /* purecov: inspected */
       }
+      else if (!abort_loop) {
+        wf_global_quiescence(); // main
+      }
       continue;
     }
 
diff --git a/sql/sql_connect.cc b/sql/sql_connect.cc
index 0add71b7b11..8e5d15774ff 100644
--- a/sql/sql_connect.cc
+++ b/sql/sql_connect.cc
@@ -45,6 +45,10 @@
 #include "proxy_protocol.h"
 #include <ssl_compat.h>
 
+extern "C" {
+#include "wf-userland.h"
+}
+
 HASH global_user_stats, global_client_stats, global_table_stats;
 HASH global_index_stats;
 /* Protects the above global stats */
@@ -1404,6 +1408,7 @@ void do_handle_one_connection(CONNECT *connect, bool put_in_cache)
     return;
   }
 
+  wf_thread_birth_group("connection_handler", "transaction"); // Birth thread
   for (;;)
   {
     bool create_user= TRUE;
@@ -1463,6 +1468,7 @@ void do_handle_one_connection(CONNECT *connect, bool put_in_cache)
 
     server_threads.insert(thd);
   }
+  wf_thread_death();
   delete thd;
 }
 #endif /* EMBEDDED_LIBRARY */
diff --git a/sql/sql_parse.cc b/sql/sql_parse.cc
index 62cf4674241..6e7c212a0ff 100644
--- a/sql/sql_parse.cc
+++ b/sql/sql_parse.cc
@@ -116,6 +116,10 @@
 #include "wsrep_thd.h"
 #include "wsrep_trans_observer.h" /* wsrep transaction hooks */
 
+extern "C" {
+#include "wf-userland.h"
+}
+
 static bool wsrep_mysql_parse(THD *thd, char *rawbuf, uint length,
                               Parser_state *parser_state,
                               bool is_com_multi,
@@ -1188,6 +1192,8 @@ static bool wsrep_tables_accessible_when_detached(const TABLE_LIST *tables)
 
 bool do_command(THD *thd)
 {
+  if (!thd->in_active_multi_stmt_transaction())
+      wf_global_quiescence();
   bool return_value;
   char *packet= 0;
   ulong packet_length;
diff --git a/sql/threadpool.h b/sql/threadpool.h
index fe77100a82a..224164c02be 100644
--- a/sql/threadpool.h
+++ b/sql/threadpool.h
@@ -19,6 +19,7 @@
 
 #define MAX_THREAD_GROUPS 100000
 
+void wf_threadpool_trigger();
 /* Threadpool parameters */
 extern uint threadpool_min_threads;  /* Minimum threads in pool */
 extern uint threadpool_idle_timeout; /* Shutdown idle worker threads  after this timeout */
diff --git a/sql/threadpool_generic.cc b/sql/threadpool_generic.cc
index 768dbab4e6b..8abcf7b5922 100644
--- a/sql/threadpool_generic.cc
+++ b/sql/threadpool_generic.cc
@@ -30,6 +30,10 @@
 #include <threadpool.h>
 #include <algorithm>
 
+extern "C" {
+#include "wf-userland.h"
+}
+
 #ifdef HAVE_IOCP
 #define OPTIONAL_IO_POLL_READ_PARAM this
 #else 
@@ -460,6 +464,10 @@ static void queue_put(thread_group_t *thread_group, native_event *ev, int cnt)
   for(int i=0; i < cnt; i++)
   {
     TP_connection_generic *c = (TP_connection_generic *)native_event_get_userdata(&ev[i]);
+    // c == NULL if we wake the listener without setting the shutdown flag. This is done
+    // when we trigger manually the quiescence.
+    if (c == NULL)
+        continue;
     c->enqueue_time= now;
     thread_group->queues[c->priority].push_back(c);
   }
@@ -751,8 +759,12 @@ static TP_connection_generic * listener(worker_thread_t *current_thread,
     {
       /* Handle the first event. */
       retval= queue_get(thread_group);
-      mysql_mutex_unlock(&thread_group->mutex);
-      break;
+      // queue_put may have not added an event (when wake_listener is trigger manually), so we have to
+      // check whether queue_get contains an event.
+      if (retval) {
+        mysql_mutex_unlock(&thread_group->mutex);
+        break;
+      }
     }
 
     if(thread_group->active_thread_count==0)
@@ -781,6 +793,7 @@ static TP_connection_generic * listener(worker_thread_t *current_thread,
       }
     }
     mysql_mutex_unlock(&thread_group->mutex);
+    wf_global_quiescence();
   }
 
   DBUG_RETURN(retval);
@@ -1145,7 +1158,9 @@ TP_connection_generic *get_event(worker_thread_t *current_thread,
       thread_group->active_thread_count--;
       mysql_mutex_unlock(&thread_group->mutex);
 
+      wf_thread_set_priority(WF_CRITICAL);
       connection = listener(current_thread, thread_group);
+      wf_thread_set_priority(WF_MEDIUM);
       if (connection)
       {
         TP_INCREMENT_GROUP_COUNTER(thread_group, dequeues_by_listener);
@@ -1172,10 +1187,15 @@ TP_connection_generic *get_event(worker_thread_t *current_thread,
       {
         queue_put(thread_group, ev, cnt);
         connection= queue_get(thread_group);
-        break;
+        // queue_get may return no result, if wake_listener is triggered manually.
+        if (connection)
+            break;
       }
     }
 
+    mysql_mutex_unlock(&thread_group->mutex);
+    wf_global_quiescence();
+    mysql_mutex_lock(&thread_group->mutex);
 
     /* And now, finally sleep */ 
     current_thread->woken = false; /* wake() sets this to true */
@@ -1220,6 +1240,45 @@ TP_connection_generic *get_event(worker_thread_t *current_thread,
   DBUG_RETURN(connection);
 }
 
+void wf_threadpool_trigger() {
+  for(uint i=0; i< threadpool_max_size; i++) {
+    thread_group_t *thread_group= &all_groups[i];
+    
+    if (mysql_mutex_trylock(&thread_group->mutex) == 0) {
+        // Skip empty groups 
+        if (thread_group->thread_count == 0) {
+            mysql_mutex_unlock(&thread_group->mutex);
+            continue;
+        }
+        
+        // Wake worker 
+        while(wake_thread(thread_group, false)==0) {
+            // Do nothing; just wakeup all threads for quiescence...
+        }
+
+        // Close previously opened pipes, otherwise a error occures:
+        // errno 24: [EMFILE] Too many open files.
+        // This happens if the process exceeds 32768 file descriptors (ll /proc/`pidof mysqld`/fd | wc -l)
+        
+        // But do not close it directly after wake_listener, otherwise the self-pipe trick won't work...
+        for (int i=0; i < 2; i++) { 
+            if (thread_group->shutdown_pipe[i] != -1) {
+                close(thread_group->shutdown_pipe[i]);
+                thread_group->shutdown_pipe[i]= -1;
+            }
+        }
+
+        if (thread_group->listener) {
+            int res= wake_listener(thread_group);
+            if (res == -1) {
+                printf("WAKE ABORT!\n");
+            }
+        }
+
+        mysql_mutex_unlock(&thread_group->mutex);
+    }
+  }
+}
 
 
 /**
@@ -1493,18 +1552,22 @@ static void *worker_main(void *param)
   this_thread.thread_group= thread_group;
   this_thread.event_count=0;
 
+  wf_thread_birth_group("worker_pool", "transaction");
   /* Run event loop */
   for(;;)
   {
+    wf_thread_set_priority(WF_MEDIUM);
     TP_connection_generic *connection;
     struct timespec ts;
     set_timespec(ts,threadpool_idle_timeout);
     connection = get_event(&this_thread, thread_group, &ts);
+    wf_thread_set_priority(WF_LOW);
     if (!connection)
       break;
     this_thread.event_count++;
     tp_callback(connection);
   }
+  wf_thread_death();
 
   /* Thread shutdown: cleanup per-worker-thread structure. */
   mysql_cond_destroy(&this_thread.cond);
diff --git a/sql/wf-userland.c b/sql/wf-userland.c
new file mode 120000
index 00000000000..6e97031e606
--- /dev/null
+++ b/sql/wf-userland.c
@@ -0,0 +1 @@
+../wfpatch-userland/wf-userland.c
\ No newline at end of file
-- 
2.45.1

