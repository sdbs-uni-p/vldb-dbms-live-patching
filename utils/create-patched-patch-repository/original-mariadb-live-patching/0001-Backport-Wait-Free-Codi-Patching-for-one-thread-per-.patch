From 0a415d1674e31712f197bbec1ba4f2a7c349fdf3 Mon Sep 17 00:00:00 2001
From: Daniel Friesel <daniel.friesel@uos.de>
Date: Mon, 4 May 2020 16:42:33 +0200
Subject: [PATCH] Backport Wait-Free Codi-Patching for
 one-thread-per-connection.

Threadpool has issues.
---
 WAITFREE                  | 50 ++++++++++++++++++++++++++++
 include/wf-userland.h     |  1 +
 sql/CMakeLists.txt        |  3 ++
 sql/mariadb.h             |  2 ++
 sql/mysqld.cc             | 55 +++++++++++++++++++++++++++++--
 sql/sql_connect.cc        | 14 ++++++++
 sql/threadpool_generic.cc | 68 +++++++++++++++++++++++++++++++++++++++
 sql/transaction.cc        |  6 ++++
 sql/wf-userland.c         |  1 +
 9 files changed, 198 insertions(+), 2 deletions(-)
 create mode 100644 WAITFREE
 create mode 120000 include/wf-userland.h
 create mode 120000 sql/wf-userland.c

diff --git a/WAITFREE b/WAITFREE
new file mode 100644
index 00000000000..d1ad588f27f
--- /dev/null
+++ b/WAITFREE
@@ -0,0 +1,50 @@
+Basis: MariaDB 10.3.15 auf Debian 10
+
+$ sudo apt install sysbench
+$ git clone --recursive git@ess-git.inf.uos.de:research/code-patching/mariadb.git
+$ cd mariadb
+
+Config anlegen:
+
+$ cat <<EOF > ~/.my.cnf
+[client]
+port=3306
+socket=/tmp/mysql.sock
+
+[mysqld]
+datadir=/tmp/mariadb-waitfree-10.3.15
+language=$PWD/sql/share/english
+#gdb
+
+[mariadb]
+# Fuer Threadpool statt One Thread per Connection:
+#thread_handling=pool-of-threads
+EOF
+
+Standardsetup:
+
+$ BUILD/compile-pentium64
+
+Alternativ für ein Debugbuild (ist beim Patchen gut eine Größenordnung langsamer):
+
+$ BUILD/compile-pentium64-debug
+
+Arbeitsverzeichnis einrichten, in diesem Fall /tmp/mariadb-waitfree:
+
+$ scripts/mysql_install_db --srcdir=$PWD --datadir=/tmp/mariadb-waitfree-10.3.15
+
+MariaDB (ggf. nach Änderungen) ausführen:
+
+$ make && (cd sql ; WF_CYCLIC=1 WF_GLOBAL=1 ./mysqld ; cd ..)
+
+Einmalig eine Testdatenbank für sysbench anlegen:
+
+$ cd client; ./mysql -e 'create database test_sb;'
+
+MariaDB regulär beenden: SIGINT (Ctrl+C) im Debugbuild, SIGQUIT (Ctrl+\) sonst, oder
+
+$ pkill -TERM mysqld
+
+Bei Deadlock im Patchcode:
+
+$ pkill -KILL mysqld
diff --git a/include/wf-userland.h b/include/wf-userland.h
new file mode 120000
index 00000000000..c5cff2e9056
--- /dev/null
+++ b/include/wf-userland.h
@@ -0,0 +1 @@
+../wf-userland/wf-userland.h
\ No newline at end of file
diff --git a/sql/CMakeLists.txt b/sql/CMakeLists.txt
index c6910f469f9..76d56994c41 100644
--- a/sql/CMakeLists.txt
+++ b/sql/CMakeLists.txt
@@ -143,6 +143,9 @@ SET (SQL_SOURCE
                ${CMAKE_CURRENT_BINARY_DIR}/lex_hash.h
                ${CMAKE_CURRENT_BINARY_DIR}/lex_token.h
                ${MYSYS_LIBWRAP_SOURCE}
+
+               # Wait-Free Code-Patching
+               wf-userland.c
 )
   
 IF (CMAKE_SYSTEM_NAME MATCHES "Linux" OR
diff --git a/sql/mariadb.h b/sql/mariadb.h
index 00cf2ed1d9c..91800d777eb 100644
--- a/sql/mariadb.h
+++ b/sql/mariadb.h
@@ -27,4 +27,6 @@
 #ifndef MARIADB_INCLUDED
 #define MARIADB_INCLUDED
 #include <my_global.h>
+//#define THREAD_NAME(x) pthread_setname_np(pthread_self(), x)
+#define THREAD_NAME(x) do {} while(0);
 #endif /* MARIADB_INCLUDED */
diff --git a/sql/mysqld.cc b/sql/mysqld.cc
index 1f155b32903..6fd5875979d 100644
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -265,6 +265,9 @@ inline void setup_fpu()
 
 } /* cplusplus */
 
+#include "wf-userland.h"
+void my_wf_wake_threadpool(void);
+
 #define MYSQL_KILL_SIGNAL SIGTERM
 
 #include <my_pthread.h>			// For thr_setconcurency()
@@ -360,6 +363,7 @@ bool my_disable_leak_check= false;
 
 uint kill_cached_threads;
 static uint wake_thread;
+static uint patch_thread;
 ulong max_used_connections;
 volatile ulong cached_thread_count= 0;
 static char *mysqld_user, *mysqld_chroot;
@@ -2977,6 +2981,7 @@ static bool cache_thread(THD *thd)
 {
   struct timespec abstime;
   DBUG_ENTER("cache_thread");
+  THREAD_NAME("cached");
   DBUG_ASSERT(thd);
 
   mysql_mutex_lock(&LOCK_thread_cache);
@@ -2999,7 +3004,7 @@ static bool cache_thread(THD *thd)
 #endif
 
     set_timespec(abstime, THREAD_CACHE_TIMEOUT);
-    while (!abort_loop && ! wake_thread && ! kill_cached_threads)
+    while (!abort_loop && ! wake_thread && ! kill_cached_threads && ! patch_thread)
     {
       int error= mysql_cond_timedwait(&COND_thread_cache, &LOCK_thread_cache,
                                        &abstime);
@@ -3012,6 +3017,17 @@ static bool cache_thread(THD *thd)
         */
         break;
       }
+      if (patch_thread)
+      {
+        //sql_print_information("woke up");
+        cached_thread_count--;
+        mysql_cond_signal(&COND_flush_thread_cache);
+        mysql_mutex_unlock(&LOCK_thread_cache);
+        wf_global_quiescence("cache", 1);
+        mysql_mutex_lock(&LOCK_thread_cache);
+        cached_thread_count++;
+        //sql_print_information("back to sleep");
+      }
     }
     cached_thread_count--;
     if (kill_cached_threads)
@@ -5790,6 +5806,30 @@ static void test_lc_time_sz()
 }
 #endif//DBUG_OFF
 
+static void my_wf_wake_thread_per_connection(void)
+{
+  //sql_print_information("waking up cached threads");
+  mysql_mutex_lock(&LOCK_thread_cache);
+  patch_thread = 1;
+  while (cached_thread_count)
+  {
+    //sql_print_information("waking up a thread");
+    mysql_cond_broadcast(&COND_thread_cache);
+    mysql_cond_wait(&COND_flush_thread_cache, &LOCK_thread_cache);
+  }
+  patch_thread = 0;
+  mysql_mutex_unlock(&LOCK_thread_cache);
+  DBUG_VOID_RETURN;
+}
+
+void my_wf_wake_threads(void)
+{
+	if (thread_handling <= SCHEDULER_ONE_THREAD_PER_CONNECTION){
+		my_wf_wake_thread_per_connection();
+	} else if (thread_handling != SCHEDULER_NO_THREADS) {
+		my_wf_wake_threadpool();
+	}
+}
 
 #ifdef __WIN__
 int win_main(int argc, char **argv)
@@ -6206,6 +6246,16 @@ int mysqld_main(int argc, char **argv)
   }
 #endif
 
+  struct wf_configuration config = {
+    .track_threads             = true,
+    .thread_count              = NULL,
+    .trigger_global_quiescence = my_wf_wake_threads,
+    .trigger_local_quiescence  = my_wf_wake_threads,
+    .patch_applied = NULL,
+    .patch_done     = NULL,
+  };
+  wf_init(config);
+
 #if defined(_WIN32) && !defined(EMBEDDED_LIBRARY)
   Service.SetRunning();
 #endif
@@ -6752,6 +6802,7 @@ void handle_connections_sockets()
 
   DBUG_PRINT("general",("Waiting for connections."));
   MAYBE_BROKEN_SYSCALL;
+  THREAD_NAME("select");
   while (!abort_loop)
   {
 #ifdef HAVE_POLL
@@ -8953,7 +9004,7 @@ static int mysql_init_variables(void)
   kill_in_progress= 0;
   cleanup_done= 0;
   test_flags= select_errors= dropping_tables= ha_open_options=0;
-  thread_count= kill_cached_threads= wake_thread= 0;
+  thread_count= kill_cached_threads= wake_thread= patch_thread= 0;
   service_thread_count= 0;
   slave_open_temp_tables= 0;
   cached_thread_count= 0;
diff --git a/sql/sql_connect.cc b/sql/sql_connect.cc
index 21cd164e2a8..3361a913e24 100644
--- a/sql/sql_connect.cc
+++ b/sql/sql_connect.cc
@@ -39,6 +39,7 @@
 #include "sql_callback.h"
 #include "wsrep_mysqld.h"
 #include "proxy_protocol.h"
+#include "wf-userland.h"
 
 HASH global_user_stats, global_client_stats, global_table_stats;
 HASH global_index_stats;
@@ -1304,6 +1305,7 @@ pthread_handler_t handle_one_connection(void *arg)
   CONNECT *connect= (CONNECT*) arg;
 
   mysql_thread_set_psi_id(connect->thread_id);
+  THREAD_NAME("conn");
 
   do_handle_one_connection(connect);
   return 0;
@@ -1385,9 +1387,11 @@ void do_handle_one_connection(CONNECT *connect)
   if (setup_connection_thread_globals(thd))
     return;
 
+  wf_thread_birth("connection");
   for (;;)
   {
     bool create_user= TRUE;
+	 THREAD_NAME("conn_l");
 
     mysql_socket_set_thread_owner(thd->net.vio->mysql_socket);
     if (thd_prepare_connection(thd))
@@ -1398,6 +1402,15 @@ void do_handle_one_connection(CONNECT *connect)
 
     while (thd_is_connection_alive(thd))
     {
+      THREAD_NAME("conn_a");
+      if (thd->server_status & SERVER_STATUS_IN_TRANS)
+      {
+        wf_local_quiescence("connect");
+      }
+      else
+      {
+        wf_global_quiescence("connect", 1);
+      }
       mysql_audit_release(thd);
       if (do_command(thd))
 	break;
@@ -1428,6 +1441,7 @@ void do_handle_one_connection(CONNECT *connect)
     thd= current_thd;
     thd->thread_stack= (char*) &thd;
   }
+  wf_thread_death("connection");
 }
 #endif /* EMBEDDED_LIBRARY */
 
diff --git a/sql/threadpool_generic.cc b/sql/threadpool_generic.cc
index a306822b1f1..c31e80bf6c7 100644
--- a/sql/threadpool_generic.cc
+++ b/sql/threadpool_generic.cc
@@ -19,6 +19,7 @@
 #include <sql_class.h>
 #include <my_pthread.h>
 #include <scheduler.h>
+#include "wf-userland.h"
 
 #ifdef HAVE_POOL_OF_THREADS
 
@@ -793,6 +794,7 @@ static TP_connection_generic * listener(worker_thread_t *current_thread,
                                thread_group_t *thread_group)
 {
   DBUG_ENTER("listener");
+  THREAD_NAME("listener");
   TP_connection_generic *retval= NULL;
 
   for(;;)
@@ -1094,6 +1096,7 @@ static int wake_thread(thread_group_t *thread_group)
   worker_thread_t *thread = thread_group->waiting_threads.front();
   if(thread)
   {
+    //sql_print_information("woke up a thread");
     thread->woken= true;
     thread_group->waiting_threads.remove(thread);
     mysql_cond_signal(&thread->cond);
@@ -1197,6 +1200,23 @@ static bool too_many_threads(thread_group_t *thread_group)
    && !thread_group->stalled);
 }
 
+/*
+static uint active_transaction_count()
+{
+  uint count = 0;
+  I_List_iterator<THD> it(threads);
+  THD *thd;
+  while ((thd=it++))
+  {
+    if (thd->server_status & SERVER_STATUS_IN_TRANS)
+    {
+      count++;
+    }
+  }
+  sql_print_information("%d active transactions", count);
+  return count;
+}
+*/
 
 /**
   Retrieve a connection with pending event.
@@ -1248,8 +1268,14 @@ TP_connection_generic *get_event(worker_thread_t *current_thread,
       thread_group->active_thread_count--;
       mysql_mutex_unlock(&thread_group->mutex);
 
+      // the listener does not handle SQL and cannot be woken easily
+      wf_thread_death("worker");
+
       connection = listener(current_thread, thread_group);
 
+      // ... and we're a worker again
+      wf_thread_birth("worker");
+
       mysql_mutex_lock(&thread_group->mutex);
       thread_group->active_thread_count++;
       /* There is no listener anymore, it just returned. */
@@ -1276,6 +1302,16 @@ TP_connection_generic *get_event(worker_thread_t *current_thread,
       }
     }
 
+	 /*
+    if (wf_transition_ongoing(true) && active_transaction_count())
+    {
+		 // perform busy waiting until all transitions are completed. We hold
+		 // the thread_group mutex all the time, so there shouldn't be any
+		 // race conditions.
+		 // (going to sleep would result in a deadlock)
+		 continue;
+	 }
+	 */
 
     /* And now, finally sleep */ 
     current_thread->woken = false; /* wake() sets this to true */
@@ -1288,6 +1324,11 @@ TP_connection_generic *get_event(worker_thread_t *current_thread,
     thread_group->waiting_threads.push_front(current_thread);
     
     thread_group->active_thread_count--;
+
+    mysql_mutex_unlock(&thread_group->mutex);
+    wf_global_quiescence("worker", 1);
+    mysql_mutex_lock(&thread_group->mutex);
+
     if (abstime)
     {
       err = mysql_cond_timedwait(&current_thread->cond, &thread_group->mutex, 
@@ -1297,6 +1338,7 @@ TP_connection_generic *get_event(worker_thread_t *current_thread,
     {
       err = mysql_cond_wait(&current_thread->cond, &thread_group->mutex);
     }
+    //sql_print_information("woke up");
     thread_group->active_thread_count++;
     
     if (!current_thread->woken)
@@ -1308,6 +1350,12 @@ TP_connection_generic *get_event(worker_thread_t *current_thread,
       */
       thread_group->waiting_threads.remove(current_thread);
     }
+    else
+    {
+      mysql_mutex_unlock(&thread_group->mutex);
+      wf_global_quiescence("worker", 1);
+      mysql_mutex_lock(&thread_group->mutex);
+    }
 
     if (err)
       break;
@@ -1315,6 +1363,7 @@ TP_connection_generic *get_event(worker_thread_t *current_thread,
 
   thread_group->stalled= false;
   mysql_mutex_unlock(&thread_group->mutex);
+  wf_global_quiescence("worker", 1);
  
   DBUG_RETURN(connection);
 }
@@ -1583,6 +1632,7 @@ static void *worker_main(void *param)
   worker_thread_t this_thread;
   pthread_detach_this_thread();
   my_thread_init();
+  THREAD_NAME("worker");
   
   DBUG_ENTER("worker_main");
   
@@ -1593,19 +1643,25 @@ static void *worker_main(void *param)
   this_thread.thread_group= thread_group;
   this_thread.event_count=0;
 
+  wf_thread_birth("worker");
+
   /* Run event loop */
   for(;;)
   {
     TP_connection_generic *connection;
     struct timespec ts;
     set_timespec(ts,threadpool_idle_timeout);
+    THREAD_NAME("worker_wait");
     connection = get_event(&this_thread, thread_group, &ts);
     if (!connection)
       break;
     this_thread.event_count++;
+    THREAD_NAME("worker_work");
     tp_callback(connection);
   }
 
+  wf_thread_death("worker");
+
   /* Thread shutdown: cleanup per-worker-thread structure. */
   mysql_cond_destroy(&this_thread.cond);
 
@@ -1627,6 +1683,18 @@ static void *worker_main(void *param)
 TP_pool_generic::TP_pool_generic()
 {}
 
+void my_wf_wake_threadpool(void)
+{
+	thread_group_t *thread_group;
+	for (uint i = 0; i < threadpool_max_size; i++) {
+		thread_group = &all_groups[i];
+		//wake_listener(thread_group);
+		mysql_mutex_lock(&thread_group->mutex);
+		while (wake_thread(thread_group) == 0) ;
+		mysql_mutex_unlock(&thread_group->mutex);
+	}
+}
+
 int TP_pool_generic::init()
 {
   DBUG_ENTER("TP_pool_generic::TP_pool_generic");
diff --git a/sql/transaction.cc b/sql/transaction.cc
index 74f4eda881b..e118e68e906 100644
--- a/sql/transaction.cc
+++ b/sql/transaction.cc
@@ -25,6 +25,8 @@
 #include "sql_acl.h"
 #include "semisync_master.h"
 
+#include "wf-userland.h"
+
 #ifndef EMBEDDED_LIBRARY
 /**
   Helper: Tell tracker (if any) that transaction ended.
@@ -33,6 +35,8 @@ static void trans_track_end_trx(THD *thd)
 {
   if (thd->variables.session_track_transaction_info > TX_TRACK_NONE)
     thd->session_tracker.transaction_info.end_trx(thd);
+  //THREAD_NAME("after_trans");
+  //wf_global_quiescence("transaction complete", 1);
 }
 #else
 #define trans_track_end_trx(A) do{}while(0)
@@ -158,6 +162,8 @@ bool trans_begin(THD *thd, uint flags)
   int res= FALSE;
   DBUG_ENTER("trans_begin");
 
+  //THREAD_NAME("in_trans");
+
   if (trans_check(thd))
     DBUG_RETURN(TRUE);
 
diff --git a/sql/wf-userland.c b/sql/wf-userland.c
new file mode 120000
index 00000000000..979befcb009
--- /dev/null
+++ b/sql/wf-userland.c
@@ -0,0 +1 @@
+../wf-userland/wf-userland.c
\ No newline at end of file
-- 
2.40.1

