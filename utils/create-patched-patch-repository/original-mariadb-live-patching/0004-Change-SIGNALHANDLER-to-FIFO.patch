From ebfd8d4ed453a93c89a5c9e21c79cbd95beb1755 Mon Sep 17 00:00:00 2001
From: Michael Fruth <Michael.Fruth@uni-passau.de>
Date: Wed, 26 Jul 2023 15:04:32 +0200
Subject: [PATCH] Change SIGNALHANDLER to FIFO

---
 wf-userland/wf-userland.c | 297 ++++++++++++++++++++++++--------------
 1 file changed, 188 insertions(+), 109 deletions(-)

diff --git a/wf-userland/wf-userland.c b/wf-userland/wf-userland.c
index 7abf36a0976..d17f294f005 100644
--- a/wf-userland/wf-userland.c
+++ b/wf-userland/wf-userland.c
@@ -3,6 +3,7 @@
 #include <stdio.h>
 #include <glob.h>
 #include <stdarg.h>
+#include <sys/epoll.h>
 #include <pthread.h>
 #include <dlfcn.h>
 #include <stddef.h>
@@ -743,132 +744,210 @@ double time_diff(struct timespec now, struct timespec future) {
         +  ( future.tv_nsec - now.tv_nsec ) / 1E9;
 }
 
-
-
-static void* wf_patch_thread_entry(void *arg) {
-    (void)arg;
-    { // Initialize Signals
-        struct sigaction act;
-        sigemptyset (&act.sa_mask);
-        act.sa_flags = 0;
-        act.sa_handler = wf_sigpatch_handler;
-        if (sigaction(SIGPATCH, &act, NULL) != 0) {
-            perror("sigaction");
-        }
+// START FIFO
+// FIFO original source code:
+// Post: https://osg.tuhh.de/Advent/12-postbox/
+// https://collaborating.tuhh.de/e-exk4/advent/-/blob/solution_12/12-postbox/postbox.c
+// and https://collaborating.tuhh.de/e-exk4/advent/-/blob/solution_12/12-postbox/fifo.c
+static void epoll_add(int epoll_fd, int fd, int events) {
+    struct epoll_event ev;
+    ev.events   = events;
+    ev.data.fd  = fd;
+
+    if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, fd, &ev) == -1) {
+        die("epoll_ctl: activate");
     }
+}
 
-    int wait = wf_config_get("WF_CYCLIC_BOOT", -1);
-    if (wait > 0) {
-        sleep(wait);
-        log("WF_CYCLIC_BOOT is done\n");
+static void epoll_del(int epoll_fd, int fd) {
+    if (epoll_ctl(epoll_fd, EPOLL_CTL_DEL, fd, NULL) == -1) {
+        die("epoll_ctl: reset");
     }
+}
 
-    {
-        int mode;
-        if ((mode = wf_config_get("WF_CYCLIC_MICRO", 0)) != 0) {
-            int cycles = wf_config_get("WF_CYCLIC_BOUND", 1000000);
-
-            if (mode == 1) {
-                log("Perform microbenchmark: AS Create+Destroy\n");
-                wf_log("microbench%d\n", mode);
-
-                for (unsigned i = 0; i < cycles; i++) {
-                    wf_timestamp_reset();
-
-                    int new_as = wf_kernel_as_new();
-                    if (new_as < 0) die("as new");
-
-                    int rc = wf_kernel_as_delete(new_as);
-                    if (rc < 0) die("as delete");
-
-                    double duration = wf_timestamp();
-                    wf_log("%f\n", duration);
-                }
-            }
-
-            if (mode == 2) {
-                log("Perform microbenchmark: AS Switch\n");
-                wf_log("microbench%d\n", mode);
-
-                int new_as = wf_kernel_as_new();
-                if (new_as < 0) die("as new");
-
-                for (unsigned i = 0; i < cycles; i++) {
-                    wf_timestamp_reset();
+static int open_fifo(char *fifo) {
+    int fd = open(fifo, O_RDONLY|O_NONBLOCK);
+    if (fd < 0) die("open/fifo");
+    return fd;
+}
 
-                    int rc = wf_kernel_as_switch(new_as);
-                    if (rc < 0) die("as switch");
+static int fifo_prepare(char *fifo, int epoll_fd) {
+    int rc = unlink(fifo);
+    if (rc < 0 && errno != ENOENT) die("unlink/fifo");
+    rc = mknod(fifo, 0666 | S_IFIFO, 0);
+    if (rc < 0) die("mknod/fifo");
 
-                    rc = wf_kernel_as_switch(0);
-                    if (rc < 0) die("as switch");
+    int fifo_fd = open_fifo(fifo);
+    epoll_add(epoll_fd, fifo_fd, EPOLLIN);
 
-                    double duration = wf_timestamp();
-                    wf_log("%f\n", duration);
-                }
-            }
+    return fifo_fd;
+}
 
-            exit(0);
-        }
+static void* wf_patch_thread_entry(void *arg) {
+    char *fifo = getenv("WF_PATCH_TRIGGER_FIFO");
+    if (fifo == NULL) {
+        // Disable patching...
+        wf_log("!!! PATCHING DISABLED !!!\n");
+        return;
     }
-
-
-    pthread_mutex_t __dummy;
-    pthread_mutex_init(&__dummy, NULL);
-
-    struct timespec absolute_wait;
-    clock_gettime(CLOCK_REALTIME, &absolute_wait);
-
-    pthread_mutex_lock(&__dummy);
-    while (true) {
-        // Wait for signal, or do periodic tests
-        double wait = wf_config_get_double("WF_CYCLIC", -1);
-        int random_ms = wf_config_get("WF_CYCLIC_RANDOM", -1);
-        if (wf_config_get("WF_CYCLIC_RANDOM", -1) != -1) {
-            random_ms = (random() % (2 * random_ms)) - random_ms;
-            // log("wf-cyclic random: %f\n", random_ms/1000.0);
-            wait += (random_ms / 1000.0);
-        }
-        int bound = wf_config_get("WF_CYCLIC_BOUND", -1);
-        if (wait == -1) {
-            pthread_cond_wait(&wf_cond_initiate, &__dummy);
-        } else {
-            // FIXME: We use this for benchmarking
-            if (bound > 0 && wf_target_generation >= bound) {
-                log("Cyclic test was OK\n");
-                _exit(0);
-            }
-            struct timespec now;
-            clock_gettime(CLOCK_REALTIME, &now);
-            double wait_remaining;
-            do {
-                absolute_wait.tv_sec  += (int)wait;
-                absolute_wait.tv_nsec += (int)((wait - (int) wait) * 1e9);
-                while (absolute_wait.tv_nsec > 1e9) {
-                    absolute_wait.tv_sec  += 1;
-                    absolute_wait.tv_nsec  -= 1000000000;
+    int epoll_fd = epoll_create1(0);
+    if (epoll_fd == -1) die("epoll_create");
+
+    int fifo_fd = fifo_prepare(fifo, epoll_fd);
+
+    for(;;) {
+        struct epoll_event event[1];
+        int nfds = epoll_wait(epoll_fd, event, 1, -1);
+        int fd = event[0].data.fd;
+        if (fd == fifo_fd) {
+            static char buf[128];
+            if (event[0].events & EPOLLIN) {
+                int len = read(fifo_fd, buf, sizeof(buf));
+                if (len < 0) die("read/fifo");
+                if (len == 0) goto close;
+                while (len > 1 && buf[len-1] == '\n') len --;
+                buf[len] = 0;
+                if (strcmp(buf, "1") == 0) {
+                    wf_initiate_patching();
                 }
-                // printf("%ld\n", absolute_wait.tv_nsec);
-
-                wait_remaining = time_diff(now, absolute_wait);
-            } while(wait_remaining < 0);
-
-            // log("sleeping for %f seconds\n", wait_remaining);
-            errno = pthread_cond_timedwait(&wf_cond_initiate, &__dummy, &absolute_wait);
-            // perror("cond timedwait");
-
-            struct timespec now2;
-            clock_gettime(CLOCK_REALTIME, &now2);
+            } else if (event[0].events & EPOLLHUP) {
+close:
+                epoll_del(epoll_fd, fifo_fd);
+                close(fifo_fd);
 
-            double waited = time_diff(now, now2);
-            log("waited for %f seconds\n", waited);
+                fifo_fd = open_fifo(fifo);
+                epoll_add(epoll_fd, fifo_fd, EPOLLIN);
+            }
         }
-
-        wf_initiate_patching();
     }
     return NULL;
 }
 
 
+//static void* wf_patch_thread_entry(void *arg) {
+//    (void)arg;
+//    { // Initialize Signals
+//        struct sigaction act;
+//        sigemptyset (&act.sa_mask);
+//        act.sa_flags = 0;
+//        act.sa_handler = wf_sigpatch_handler;
+//        if (sigaction(SIGPATCH, &act, NULL) != 0) {
+//            perror("sigaction");
+//        }
+//    }
+//
+//    int wait = wf_config_get("WF_CYCLIC_BOOT", -1);
+//    if (wait > 0) {
+//        sleep(wait);
+//        log("WF_CYCLIC_BOOT is done\n");
+//    }
+//
+//    {
+//        int mode;
+//        if ((mode = wf_config_get("WF_CYCLIC_MICRO", 0)) != 0) {
+//            int cycles = wf_config_get("WF_CYCLIC_BOUND", 1000000);
+//
+//            if (mode == 1) {
+//                log("Perform microbenchmark: AS Create+Destroy\n");
+//                wf_log("microbench%d\n", mode);
+//
+//                for (unsigned i = 0; i < cycles; i++) {
+//                    wf_timestamp_reset();
+//
+//                    int new_as = wf_kernel_as_new();
+//                    if (new_as < 0) die("as new");
+//
+//                    int rc = wf_kernel_as_delete(new_as);
+//                    if (rc < 0) die("as delete");
+//
+//                    double duration = wf_timestamp();
+//                    wf_log("%f\n", duration);
+//                }
+//            }
+//
+//            if (mode == 2) {
+//                log("Perform microbenchmark: AS Switch\n");
+//                wf_log("microbench%d\n", mode);
+//
+//                int new_as = wf_kernel_as_new();
+//                if (new_as < 0) die("as new");
+//
+//                for (unsigned i = 0; i < cycles; i++) {
+//                    wf_timestamp_reset();
+//
+//                    int rc = wf_kernel_as_switch(new_as);
+//                    if (rc < 0) die("as switch");
+//
+//                    rc = wf_kernel_as_switch(0);
+//                    if (rc < 0) die("as switch");
+//
+//                    double duration = wf_timestamp();
+//                    wf_log("%f\n", duration);
+//                }
+//            }
+//
+//            exit(0);
+//        }
+//    }
+//
+//
+//    pthread_mutex_t __dummy;
+//    pthread_mutex_init(&__dummy, NULL);
+//
+//    struct timespec absolute_wait;
+//    clock_gettime(CLOCK_REALTIME, &absolute_wait);
+//
+//    pthread_mutex_lock(&__dummy);
+//    while (true) {
+//        // Wait for signal, or do periodic tests
+//        double wait = wf_config_get_double("WF_CYCLIC", -1);
+//        int random_ms = wf_config_get("WF_CYCLIC_RANDOM", -1);
+//        if (wf_config_get("WF_CYCLIC_RANDOM", -1) != -1) {
+//            random_ms = (random() % (2 * random_ms)) - random_ms;
+//            // log("wf-cyclic random: %f\n", random_ms/1000.0);
+//            wait += (random_ms / 1000.0);
+//        }
+//        int bound = wf_config_get("WF_CYCLIC_BOUND", -1);
+//        if (wait == -1) {
+//            pthread_cond_wait(&wf_cond_initiate, &__dummy);
+//        } else {
+//            // FIXME: We use this for benchmarking
+//            if (bound > 0 && wf_target_generation >= bound) {
+//                log("Cyclic test was OK\n");
+//                _exit(0);
+//            }
+//            struct timespec now;
+//            clock_gettime(CLOCK_REALTIME, &now);
+//            double wait_remaining;
+//            do {
+//                absolute_wait.tv_sec  += (int)wait;
+//                absolute_wait.tv_nsec += (int)((wait - (int) wait) * 1e9);
+//                while (absolute_wait.tv_nsec > 1e9) {
+//                    absolute_wait.tv_sec  += 1;
+//                    absolute_wait.tv_nsec  -= 1000000000;
+//                }
+//                // printf("%ld\n", absolute_wait.tv_nsec);
+//
+//                wait_remaining = time_diff(now, absolute_wait);
+//            } while(wait_remaining < 0);
+//
+//            // log("sleeping for %f seconds\n", wait_remaining);
+//            errno = pthread_cond_timedwait(&wf_cond_initiate, &__dummy, &absolute_wait);
+//            // perror("cond timedwait");
+//
+//            struct timespec now2;
+//            clock_gettime(CLOCK_REALTIME, &now2);
+//
+//            double waited = time_diff(now, now2);
+//            log("waited for %f seconds\n", waited);
+//        }
+//
+//        wf_initiate_patching();
+//    }
+//    return NULL;
+//}
+
+
 typedef struct {
     double timestamp;
     char *name;
-- 
2.30.2

